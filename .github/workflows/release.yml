name: Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - master  # Changed from main to master
    paths:
      - 'Cargo.toml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  precheck:
    name: Determine if build should run
    runs-on: ubuntu-22.04  # Use specific version instead of latest
    outputs:
      should_build: ${{ steps.set.outputs.should_build }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decide build trigger (tag or Cargo.toml version change)
        id: set
        shell: bash
        run: |
          set -euo pipefail
          ref="${GITHUB_REF}"
          # If this is a tag like v*, always build
          if [[ "$ref" == refs/tags/v* ]]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # For non-tag push events (e.g., main with Cargo.toml path), build only if version changed
          before="${{ github.event.before }}"
          # If 'before' is missing (e.g., manual dispatch or initial commit), allow build
          if [[ -z "${before}" || "${before}" == 0000000000000000000000000000000000000000 ]]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Extract current and previous versions from Cargo.toml
          curr_version=$(grep -m1 '^version\s*=\s*"' Cargo.toml | sed -E 's/.*"([^"]+)".*/\1/')
          prev_version=$(git show "${before}:Cargo.toml" 2>/dev/null | grep -m1 '^version\s*=\s*"' | sed -E 's/.*"([^"]+)".*/\1/' || true)

          if [[ -n "${prev_version}" && "${curr_version}" != "${prev_version}" ]]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_build=false" >> "$GITHUB_OUTPUT"
          fi
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: precheck
    if: needs.precheck.outputs.should_build == 'true'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            name: ccstatus-linux-x64.tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-2022  # Native Windows compilation
            name: ccstatus-windows-x64.zip
          - target: x86_64-apple-darwin
            os: macos-13  # Native Intel macOS compilation
            name: ccstatus-macos-x64.tar.gz
          - target: aarch64-apple-darwin
            os: macos-15  # Native Apple Silicon macOS compilation  
            name: ccstatus-macos-arm64.tar.gz

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    # No cross-compilation tools needed for native builds

    # Add basic quality checks (independent of ci.yml)
    # Skip formatting check due to rustfmt edition detection issues
    # - name: Check code formatting (src only)
    #   run: find src/ -name "*.rs" -exec rustfmt --check {} \;

    - name: Check code compiles
      run: cargo check --target ${{ matrix.target }}

    # Force static linking for all dependencies on macOS
    - name: Configure static linking for macOS
      if: runner.os == 'macOS'
      run: |
        echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
        echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV

    - name: Build binary  
      run: cargo build --release --target ${{ matrix.target }} --features timings-curl-static

    - name: Package Linux/macOS
      if: matrix.target != 'x86_64-pc-windows-msvc'  # Package all non-Windows targets
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/ccstatus dist/ccstatus
        cd dist
        tar czf ../${{ matrix.name }} ccstatus

    - name: Package Windows
      if: matrix.target == 'x86_64-pc-windows-msvc'
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/ccstatus.exe dist/ccstatus.exe
        Compress-Archive -Path "dist/ccstatus.exe" -DestinationPath "${{ matrix.name }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  release:
    name: Create Release
    runs-on: ubuntu-22.04  # Use specific version instead of latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/*/*
        generate_release_notes: true
        draft: false
        prerelease: false

