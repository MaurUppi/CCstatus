name: Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - master  # Changed from main to master
    paths:
      - 'Cargo.toml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  precheck:
    name: Determine if build should run
    runs-on: ubuntu-22.04  # Use specific version instead of latest
    outputs:
      should_build: ${{ steps.set.outputs.should_build }}
      version: ${{ steps.set.outputs.version }}
      create_tag: ${{ steps.set.outputs.create_tag }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decide build trigger (tag or Cargo.toml version change)
        id: set
        shell: bash
        run: |
          set -euo pipefail
          ref="${GITHUB_REF}"
          
          # Extract current version from Cargo.toml
          curr_version=$(grep -m1 '^version\s*=\s*"' Cargo.toml | sed -E 's/.*"([^"]+)".*/\1/')
          echo "version=${curr_version}" >> "$GITHUB_OUTPUT"
          
          # If this is a tag like v*, always build
          if [[ "$ref" == refs/tags/v* ]]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
            echo "create_tag=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # For non-tag push events (e.g., main with Cargo.toml path), build only if version changed
          before="${{ github.event.before }}"
          # If 'before' is missing (e.g., manual dispatch or initial commit), allow build
          if [[ -z "${before}" || "${before}" == 0000000000000000000000000000000000000000 ]]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
            echo "create_tag=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Extract previous version from Cargo.toml
          prev_version=$(git show "${before}:Cargo.toml" 2>/dev/null | grep -m1 '^version\s*=\s*"' | sed -E 's/.*"([^"]+)".*/\1/' || true)

          if [[ -n "${prev_version}" && "${curr_version}" != "${prev_version}" ]]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
            echo "create_tag=true" >> "$GITHUB_OUTPUT"
            echo "📦 Version changed: ${prev_version} → ${curr_version}, will create tag v${curr_version}"
          else
            echo "should_build=false" >> "$GITHUB_OUTPUT"
            echo "create_tag=false" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: precheck
    if: needs.precheck.outputs.should_build == 'true'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
            name: ccstatus-linux-x64-static.tar.gz
            variant: static
          - target: x86_64-pc-windows-msvc
            os: windows-2022  # Native Windows compilation
            name: ccstatus-windows-x64-static.zip
            variant: static
          - target: x86_64-apple-darwin
            os: macos-13  # Native Intel macOS compilation
            name: ccstatus-macos-x64-static.tar.gz
            variant: static
          - target: x86_64-apple-darwin
            os: macos-13  # Slim variant with system deps
            name: ccstatus-macos-x64-slim.tar.gz
            variant: slim
          - target: aarch64-apple-darwin
            os: macos-15  # Native Apple Silicon macOS compilation  
            name: ccstatus-macos-arm64-static.tar.gz
            variant: static
          - target: aarch64-apple-darwin
            os: macos-15  # Slim variant with system deps
            name: ccstatus-macos-arm64-slim.tar.gz
            variant: slim

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    # No cross-compilation tools needed for native builds

    # Add basic quality checks (independent of ci.yml)
    # Skip formatting check due to rustfmt edition detection issues
    # - name: Check code formatting (src only)
    #   run: find src/ -name "*.rs" -exec rustfmt --check {} \;

    - name: Check code compiles
      run: cargo check --target ${{ matrix.target }}

    # Force static linking for all dependencies on macOS
    - name: Configure static linking for macOS
      if: runner.os == 'macOS'
      run: |
        echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
        echo "OPENSSL_NO_VENDOR=1" >> $GITHUB_ENV

    - name: Build binary  
      shell: bash
      run: |
        if [ "${{ matrix.variant }}" = "slim" ]; then
          # Slim build: smaller but requires system OpenSSL, includes self-update
          cargo build --release --target ${{ matrix.target }} --features "network-monitoring,self-update"
        else
          # Static build: larger but no system dependencies, includes self-update
          cargo build --release --target ${{ matrix.target }} --features "timings-curl-static,self-update"
        fi

    - name: Package Linux/macOS
      if: matrix.target != 'x86_64-pc-windows-msvc'  # Package all non-Windows targets
      shell: bash
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/ccstatus dist/ccstatus
        cd dist
        tar czf ../${{ matrix.name }} ccstatus

    - name: Package Windows
      if: matrix.target == 'x86_64-pc-windows-msvc'
      shell: bash
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/ccstatus.exe dist/ccstatus.exe
        cd dist
        powershell -Command "Compress-Archive -Path 'ccstatus.exe' -DestinationPath '../${{ matrix.name }}'"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  release:
    name: Create Release
    runs-on: ubuntu-22.04  # Use specific version instead of latest
    needs: [precheck, build]
    if: needs.precheck.outputs.should_build == 'true' && (startsWith(github.ref, 'refs/tags/') || needs.precheck.outputs.create_tag == 'true')
    env:
      VERSION: ${{ needs.precheck.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create and push tag (if version changed)
      if: needs.precheck.outputs.create_tag == 'true'
      shell: bash
      run: |
        version="${{ needs.precheck.outputs.version }}"
        tag="v${version}"
        echo "Creating tag: ${tag}"
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create and push tag
        git tag -a "${tag}" -m "Release ${tag}"
        git push origin "${tag}"
        
        echo "✅ Created and pushed tag: ${tag}"

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Get tag name for release
      id: tag
      shell: bash
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # Use existing tag
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
        else
          # Use version from precheck
          echo "tag_name=v${{ needs.precheck.outputs.version }}" >> "$GITHUB_OUTPUT"
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag_name }}
        files: artifacts/*/*
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## 📦 Download Options

          **🎯 Recommended (Static Builds)** - Zero dependencies, download and run:
          - **Linux x64**: `ccstatus-linux-x64-static.tar.gz` (~7MB)
          - **Windows x64**: `ccstatus-windows-x64-static.zip` (~7MB) 
          - **macOS Intel**: `ccstatus-macos-x64-static.tar.gz` (~7MB)
          - **macOS Apple Silicon**: `ccstatus-macos-arm64-static.tar.gz` (~7MB)

          **⚡ Advanced Users (Slim Builds)** - Smaller size, requires system OpenSSL:
          - **macOS Intel**: `ccstatus-macos-x64-slim.tar.gz` (~3MB) *
          - **macOS Apple Silicon**: `ccstatus-macos-arm64-slim.tar.gz` (~3MB) *

          \* Slim builds require `brew install openssl@3` or equivalent system OpenSSL 3.x

          ## 🔧 Build Details

          | Variant | Features | Size | Dependencies | Use Case |
          |---------|----------|------|--------------|----------|
          | **static** | `timings-curl-static` | ~7MB | None ✅ | General distribution |
          | **slim** | `network-monitoring` | ~3MB | System OpenSSL 3.x | Development/CI |

          ## 📋 Quick Start

          ```bash
          # Download static build (recommended)
          curl -L https://github.com/MaurUppi/CCstatus/releases/latest/download/ccstatus-macos-arm64-static.tar.gz | tar -xz
          chmod +x ccstatus
          ./ccstatus -V

          # Or download slim build (requires system OpenSSL)  
          brew install openssl@3
          curl -L https://github.com/MaurUppi/CCstatus/releases/latest/download/ccstatus-macos-arm64-slim.tar.gz | tar -xz
          chmod +x ccstatus
          ./ccstatus -V
          ```

          ---

    # Update latest.json after successful release
    - name: Update latest.json
      shell: bash
      run: |
        version="${{ needs.precheck.outputs.version }}"
        tag="${{ steps.tag.outputs.tag_name }}"
        
        echo "📝 Updating latest.json for version: ${version}"
        
        # Update latest.json with current release info
        cat > latest.json << EOF
        {
          "version": "${version}",
          "notes_url": "https://github.com/MaurUppi/CCstatus/releases/tag/${tag}",
          "channel": "stable",
          "published_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "assets": []
        }
        EOF
        
        echo "✅ Updated latest.json content:"
        cat latest.json

    - name: Checkout master for pushing latest.json
      uses: actions/checkout@v4
      with:
        ref: master
        fetch-depth: 0
        path: repo-master

    - name: Commit and push latest.json
      shell: bash
      working-directory: repo-master
      env:
        VERSION: ${{ needs.precheck.outputs.version }}
      run: |
        set -euo pipefail
        
        # Copy generated latest.json from main workspace
        cp ../latest.json latest.json || true
        
        # Skip if no change
        if git diff --quiet -- latest.json; then
          echo "⚠️  No changes to latest.json, skipping commit"
          exit 0
        fi
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add latest.json
        git commit -m "chore: update latest.json for v${VERSION} release"
        git push origin master
        echo "✅ Pushed latest.json update to master"

    # NPM Publishing Steps - Added after GitHub Release
    # Validate NPM publishing conditions
    - name: Validate NPM publishing conditions
      id: npm_check
      shell: bash
      run: |
        echo "🔍 Validating NPM publishing conditions..."
        
        # Check conditions
        is_tag_ref="${{ startsWith(github.ref, 'refs/tags/') }}"
        create_tag="${{ needs.precheck.outputs.create_tag }}"
        version="${{ needs.precheck.outputs.version }}"
        
        echo "GitHub ref: ${{ github.ref }}"
        echo "Is tag ref: $is_tag_ref" 
        echo "Create tag: $create_tag"
        echo "Version: $version"
        
        # Determine if we should publish to NPM
        if [[ "$is_tag_ref" == "true" ]] || [[ "$create_tag" == "true" ]]; then
          echo "✅ NPM publishing conditions met"
          echo "should_publish=true" >> "$GITHUB_OUTPUT"
        else
          echo "⚠️  NPM publishing conditions not met"
          echo "should_publish=false" >> "$GITHUB_OUTPUT"
        fi
        
        # Additional validation - ensure we have a version
        if [[ -z "$version" ]]; then
          echo "❌ Error: No version detected"
          exit 1
        fi
        
        echo "npm_version=$version" >> "$GITHUB_OUTPUT"

    - name: Setup Node.js for NPM
      if: steps.npm_check.outputs.should_publish == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Extract binaries from artifacts
      if: steps.npm_check.outputs.should_publish == 'true'
      run: |
        mkdir -p extracted
        
        # macOS x64 (static only for npm)
        tar -xzf artifacts/ccstatus-macos-x64-static.tar.gz/ccstatus-macos-x64-static.tar.gz -C extracted
        mv extracted/ccstatus extracted/ccstatus-darwin-x64
        
        # macOS ARM64 (static only)
        tar -xzf artifacts/ccstatus-macos-arm64-static.tar.gz/ccstatus-macos-arm64-static.tar.gz -C extracted
        mv extracted/ccstatus extracted/ccstatus-darwin-arm64
        
        # Linux x64 (static)
        tar -xzf artifacts/ccstatus-linux-x64-static.tar.gz/ccstatus-linux-x64-static.tar.gz -C extracted
        mv extracted/ccstatus extracted/ccstatus-linux-x64
        
        # Windows
        unzip artifacts/ccstatus-windows-x64-static.zip/ccstatus-windows-x64-static.zip -d extracted
        mv extracted/ccstatus.exe extracted/ccstatus-win32-x64.exe
        
        ls -la extracted/

    - name: Prepare NPM packages
      if: steps.npm_check.outputs.should_publish == 'true'
      env:
        # Safety: Override GITHUB_REF for script compatibility
        GITHUB_REF: "refs/tags/v${{ env.VERSION }}"
      run: |
        echo "📦 Preparing NPM packages for version: ${{ env.VERSION }}"
        
        # Pass resolved version directly to packaging script
        node npm/scripts/prepare-packages.js "${{ env.VERSION }}"
        
        # Copy binaries to platform directories
        cp extracted/ccstatus-darwin-x64 npm-publish/darwin-x64/ccstatus
        cp extracted/ccstatus-darwin-arm64 npm-publish/darwin-arm64/ccstatus
        cp extracted/ccstatus-linux-x64 npm-publish/linux-x64/ccstatus
        cp extracted/ccstatus-win32-x64.exe npm-publish/win32-x64/ccstatus.exe
        
        # Set executable permissions
        chmod +x npm-publish/darwin-x64/ccstatus
        chmod +x npm-publish/darwin-arm64/ccstatus
        chmod +x npm-publish/linux-x64/ccstatus
        
        # Verify packages
        echo "📋 Package structure for version ${{ env.VERSION }}:"
        find npm-publish -name "package.json" -exec echo "=== {} ===" \; -exec head -5 {} \;

    - name: Publish platform packages to NPM
      if: steps.npm_check.outputs.should_publish == 'true'
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        echo "📦 Publishing NPM packages for version: ${{ env.VERSION }}"
        
        for platform in darwin-x64 darwin-arm64 linux-x64 win32-x64; do
          echo "📦 Publishing @mauruppi/ccstatus-$platform"
          cd npm-publish/$platform
          npm publish --access public || {
            echo "❌ Failed to publish @mauruppi/ccstatus-$platform"
            exit 1
          }
          cd ../..
          echo "✅ Published @mauruppi/ccstatus-$platform"
        done

    - name: Wait for NPM registry
      if: steps.npm_check.outputs.should_publish == 'true'
      run: |
        echo "⏳ Waiting for platform packages to be available..."
        sleep 30

    - name: Publish main package to NPM
      if: steps.npm_check.outputs.should_publish == 'true'
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        cd npm-publish/main
        echo "📦 Publishing @mauruppi/ccstatus"
        npm publish --access public || {
          echo "❌ Failed to publish @mauruppi/ccstatus"
          exit 1
        }
        echo "✅ Published @mauruppi/ccstatus"
        echo ""
        echo "🎉 NPM packages published successfully!"
        echo "Install with: npm install -g @mauruppi/ccstatus"
        
        # Final validation
        echo "🔍 Final NPM publishing validation completed for version: ${{ env.VERSION }}"
